import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;

import in_out.Out;

public class WordleProject extends JFrame {

	private static final long serialVersionUID = 1L;

	// Creating display elements
	private JPanel gridPanel;
	private JTextField inputField;
	private JButton enterButton;
	private JLabel resultLabel;
	private JLabel title;
	private JButton playAgainButton;
	static int currentRow = 0;
	private JLabel[][] letterLabels; // Array to store the labels for each letter in the grid
	char[] answerIndex = getWord(); // Getting random word from getWord()

	public WordleProject() {
		setTitle("Wordle ICS3U Zain Babar"); // Program header
		setSize(700, 800); // Program size
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		gridPanel = new JPanel(new GridLayout(6, 5)); // Wordle layout
		letterLabels = new JLabel[6][5]; // Initialize the grid

		// Add labels to the grid panel and assign them to the letterLabels array
		for (int row = 0; row < 6; row++) { // 6 rows
			for (int col = 0; col < 5; col++) { // 5 columns
				JLabel letterBoxLabels = new JLabel();
				letterBoxLabels.setBorder(BorderFactory.createLineBorder(Color.BLACK)); // border between each letter

				letterBoxLabels.setHorizontalAlignment(SwingConstants.CENTER); // Centers the text in the middle of the lable
				letterBoxLabels.setVerticalAlignment(SwingConstants.CENTER);

				gridPanel.add(letterBoxLabels);
				letterLabels[row][col] = letterBoxLabels; // Assign the label to the index witin the 2d array
			}
		}

		// JFrame element properties
		inputField = new JTextField(5); // 5 character long text field
		enterButton = new JButton("Enter"); // Enter Button Label
		resultLabel = new JLabel();
		title = new JLabel("WORDLE", SwingConstants.CENTER); // Title
		title.setFont(new Font("Monospace", Font.BOLD, 114)); // Title Font
		playAgainButton = new JButton("Play Again?"); // Play Again Button

		// Setting to false - only visible once game ends
		playAgainButton.setVisible(false);

		// Adding elements
		JPanel inputPanel = new JPanel();
		inputPanel.add(inputField);
		inputPanel.add(enterButton);
		inputPanel.add(resultLabel);
		inputPanel.add(playAgainButton);

		setLayout(new BorderLayout());
		add(gridPanel, BorderLayout.CENTER);
		add(inputPanel, BorderLayout.SOUTH);
		add(title, BorderLayout.NORTH);

		// If the enter button is clicked, program will check if word is valid
		enterButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {

				checkGuess();
			}
		});

		// Checking for input on PlayAgainButton
		playAgainButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {

				resetGame();

			}
		});
	}

	public static void main(String[] args) {

		// Starting game
		WordleProject game = new WordleProject();
		game.setVisible(true);

	}

	/**
	 * resetGame() will reset the game if PlayAgainButton clicked.
	 * Reset all coloured backgrounds to white
	 * Get new random word to guess
	 * Reset number of tries (rows)
	 * Set Enter button to visible to allow for guessing
	 */
	private void resetGame() {
		// If button is clicked, game must reset

		// Resetting labels
		resultLabel.setText("");
		for (int row = 0; row < 6; row++) {
			for (int col = 0; col < 5; col++) {

				letterLabels[row][col].setBackground(Color.WHITE);
				letterLabels[row][col].setText("");
			}
		}

		//Getting new answer word
		answerIndex = getWord();

		// Resetting turns to 0
		currentRow = 0;

		// Display enter button to allow guesses
		enterButton.setVisible(true);
		playAgainButton.setVisible(false);
	}

	/**
	 * Method will intake the guess from the user from the textbox and compare it
	 * against the answerIndex
	 * If any letters match, box will turn green.
	 * If any letters mismatch, box will turn yellow.
	 * If any letters are not found, box will turn gray.
	 */
	private void checkGuess() {
		// Gets word from text box
		String userWord = inputField.getText();
		String word = userWord.toUpperCase(); // Converting entered in string to uppercase for consistent displaying

		// Converting string to indexes of the letters of the word to compare to answer word
		char[] letterIndex = word.toCharArray();

		// Checking if word is 5 letters
		if (wordLengthCheck(word) == false) {
			resultLabel.setText("Word must be 5 letters");
			return; // Exit the ActionPerformed method and display warning

		// Checking if user does not guess word in 6 tries, game ends
		} else if (currentRow == 6) {
			String answerWord = new String(answerIndex); // Converts char array to string to display answer

			//Displays correct word
			resultLabel.setText("You did not guess the word! The word was " + answerWord);
			playAgainButton.setVisible(true);

			// Removing enter button from display to prevent further guesses
			enterButton.setVisible(false);
		
		//Checks for valid lettersd in word
		} else if (validLetters(word) == false) {
			resultLabel.setText("Word must have letters");
			return; // Exit the ActionPerformed method and display warning
		
		//Checks if word is an English word
		} else if (validEnglishWord(word) == false) {
			resultLabel.setText("Must be an English word");
			return;
		
		//Passes all tests
		} else {
			resultLabel.setText("Try again.");
			if (currentRow < 7) { // Only 6 rows

				// Displaying guessed word

				//Finding current index green, yellow, or gray
				for (int col = 0; col < 5; col++) {
					
					//Initialize variables
					char currLetter = letterIndex[col];
					char answerLetter = answerIndex[col];
					Color letterColor = Color.GRAY;

					// If the letter is in the same position, change to green
					if (currLetter == answerLetter) {
						letterColor = Color.GREEN;
					
					//Once all letters are in correct position (numCorrectlyPlaced), all other letters (letterOccurences) will turn yellow
					} else if (numCorrectlyPlaced(letterIndex, answerIndex, col) < letterOccurrences(currLetter,
							answerIndex)) {
						letterColor = Color.YELLOW; 
					
					//If letter is not found, turn gray
					} else {
						letterColor = Color.GRAY;
					}
					
					//Change background colour of corresponding cell
					letterLabels[currentRow][col].setOpaque(true);
					letterLabels[currentRow][col].setBackground(letterColor);

					// Printing out letters
					letterLabels[currentRow][col].setText(String.valueOf(letterIndex[col]));
					letterLabels[currentRow][col].setFont(new Font("Monospace", Font.PLAIN, 66));
				}

				// Going to next turn
				currentRow++;

				// Checking if word is the same as answer word, game ends
				if (correctWord(letterIndex, answerIndex) == true) {
					resultLabel.setText("You won!");

					// Change letters to green, indicating user has won
					for (int col = 0; col < 5; col++) {

						letterLabels[currentRow - 1][col].setBackground(Color.GREEN);
					}

					//Giving user option to play again
					playAgainButton.setVisible(true);

					// Removing enter button from display to prevent further guesses
					enterButton.setVisible(false);

				}

			}

		}
	}

	/**
	 * Method will read textfile of random 5 letter words and choose one for
	 * guessing
	 * @return(char[] answerWord), will return a char array to efficiently compare
	 * to guessing indexes.
	 */
	public static char[] getWord() {

		// Getting random number to search random line
		int randomPosition = 0;

		// Placeholders for random word
		String random = "";

		try {

			// Reads randomWords text file to obtain random word
			FileReader fr = new FileReader("randomWords.txt");
			BufferedReader br = new BufferedReader(fr);

			// Getting random line to read
			randomPosition = (int) (Math.random() * 1580 + 1);

			// Reads file until randomPosition
			for (int i = 0; i < randomPosition; i++) {
				br.readLine();
			}

			//Getting word from random line
			random = br.readLine();

			//Converting answer word to a char array with uppercase letters
			String randomUpper = random.toUpperCase();
			char[] answerIndex = randomUpper.toCharArray();

			// Close the text file
			fr.close();
			br.close();

			
				
			// Return the random word chosen
			return answerIndex;

			// Catches errors
		} catch (IOException e) {
			Out.println("Error");
		}
		return null;

	}

	/**
	 * Method ensures that guessed word is an English word by comparing via text
	 * file with all English words.
	 * @param(String word) will intake user guessed word to check validity.
	 * @return(true) word is an English word
	 * @return(false) word is not an English word
	 */
	public static boolean validEnglishWord(String word) {

		try {

			//Reads english word dictionary
			FileReader fr = new FileReader("english3.txt");
			BufferedReader br = new BufferedReader(fr);

			String line;

			//If not found in dictionary, return false
			while ((line = br.readLine()) != null) {
				if (line.equalsIgnoreCase(word)) {
					br.close();
					return true;

				}

			}

			br.close();

		} catch (IOException e) {
			Out.println("Error");
		}

		//if found, return true
		return false;

	}

	/**
	 * Method ensures that guessed word only has alphabetical characters.
	 * @param(String word) will intake user guessed word to check validity.
	 * @return(true) word contains valid letters
	 * @return(false) word does not contain valid letters
	 */
	public static boolean validLetters(String word) {

		//Checks if each individual letter is an alphabetical letter
		for (int i = 0; i < word.length(); i++) {
			char currentRealLetter = word.charAt(i);
			if (!Character.isLetter(currentRealLetter)) {
				return false;
			}
		}
		return true;
	}

	/**
	 * Method ensures that guessed word only has 5 letters
	 * 
	 * @param(String word) will intake user guessed word to check validity.
	 * @return(true) word contains 5 valid letters
	 * @return(false) word does not 5 contain valid letters
	 */
	public static boolean wordLengthCheck(String word) {

		// if word is not 5, returns true
		if (word.length() != 5) {
			return false;

			// If word is 5, returns false
		} else {
			return true;
		}

	}

	/**
	 * Method checks if all indexes of guessedWord match all indexes of answerWord
	 * @param(char[] letterIndex, char[] answerIndex) will intake user guessed index
	 * to check if equal to answer index.
	 * @return(true) guessed word is correct
	 * @return(false) guessed word is not correct
	 */
	public static boolean correctWord(char[] letterIndex, char[] answerIndex) {

		// If word is same as answer word, returns true
		if ((letterIndex[0] == answerIndex[0]) && (letterIndex[1] == answerIndex[1])
				&& (letterIndex[2] == answerIndex[2]) && (letterIndex[3] == answerIndex[3])
				&& (letterIndex[4] == answerIndex[4])) {
			return true;

			// If word is not same as answer return false
		} else {
			return false;
		}

	}

	/**
	 * Method checks all times where current letter is in correct position.
	 * @param(char[] letterIndex, char[] answerIndex, int pos) Current position is saved,
	 * all times where the current letter is found in the correct position, the count will go up.
	 * @return(int count) returns final number of times that the letter is found in the current position
	 */
	
	public static int numCorrectlyPlaced(char[] letterIndex, char[] answerIndex, int pos) {

		//Initialize variables
		char guessLetter = letterIndex[pos];
		int count = 0;

		// Return how many times the character at 'pos' is placed correctly in a
		// position that is not pos
		// e.g. ("hexes", "paves", 1) returns 1
		for (int i = 0; i < answerIndex.length; i++) {
			if (i != pos && letterIndex[i] == guessLetter && answerIndex[i] == guessLetter) {
				count += 1;
			}
		}

		return count;
	}

	/**
	 * Method checks all times where current letter is found in word.
	 * @param(char letter, char[] letter) current letter is used to compare against the word
	 * all times where the current letter is found in the word, the count will go up.
	 * @return(int count) returns final number of times that the letter is found in the word
	 */

	public static int letterOccurrences(char letter, char[] word) {

		//Initialize count
		int count = 0;

		// Returns the number of occurrences of 'letter' in 'word'
		for (int i = 0; i < word.length; i++) {
			if (word[i] == letter) {
				count += 1;
			}
		}

		return count;
	}
}
